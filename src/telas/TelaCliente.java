/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import banco.ClienteController;
import banco.FilmeController;
import filme.Filme;
import java.awt.Color;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import static telas.TelaFuncionario.listaFilme;
import usuario.cliente.Cliente;
import usuario.cliente.HistoricoCliente;

/**
 *
 * @author jscal
 */
public class TelaCliente extends javax.swing.JFrame {
    //public static ArrayList<Filme> listaFavoritos = new ArrayList<>();
    private FilmeController fic = new FilmeController();
    private ClienteController cc = new ClienteController();
    public static ArrayList<HistoricoCliente> listaHistorico = new ArrayList<>();
    String colunas[] = {"Genero", "Titulo", "Duracao", "Produtora", "Elenco", "Avaliação"};
    private int rowDelete;
    private String codFuncSelecionado;
    private Cliente clienteAtual;
    boolean primeiroAcesso = false;
    /**
     * Creates new form TelaCliente
     */
    public TelaCliente() {
        initComponents();
    }
    
    public TelaCliente(Cliente cliente){
        initComponents();
        try {
            TelaFuncionario.listaFilme = fic.listar();
        } catch (SQLException ex) {
            Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.clienteAtual = cliente;
        btAssistir.setEnabled(false);
        btSalvar.setEnabled(false);
    }
    
    public void criarTabela(){
    DefaultTableModel modelo = new DefaultTableModel();

    modelo.addColumn("Genero");
    modelo.addColumn("Titulo");
    modelo.addColumn("Duracao");
    modelo.addColumn("Produtora");
    modelo.addColumn("Elenco");
    modelo.addColumn("Avaliação");
    
    
    
    for (Filme a : listaFilme) {
            modelo.addRow(new Object[]{
                a.getGenero(), a.getTitulo(), a.getDuracao(), a.getProdutora(), a.getElenco(), a.getPontuacao()
            });
        }
    
        tabelaFilmes.setModel(modelo);
        tabelaFilmes.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
        @Override
        public void valueChanged(ListSelectionEvent e) {
        int linha = tabelaFilmes.getSelectedRow();
                if (linha != -1) {
                    rowDelete = linha;
                    codFuncSelecionado
                            = (String) tabelaFilmes.getValueAt(linha, 1);
                    /*   A variavel codFuncSelecionado armazenao 
                     * o conteudo referente a coluna determina, 
                     * no caso a coluna determina é a 1, que é
                     * a coluna referente aos TITULOS dos filmes
                     */
                    btAssistir.setEnabled(true);
                    btSalvar.setEnabled(true);
                } else {
                    btAssistir.setEnabled(false);
                    btSalvar.setEnabled(false);
                }
        }    
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaFilmes = new javax.swing.JTable();
        btSalvar = new javax.swing.JButton();
        btAssistir = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        labelBemVindo = new javax.swing.JLabel();
        labelBuscar = new javax.swing.JLabel();
        inputBuscar = new javax.swing.JTextField();
        btBuscar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btRecomendados = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        BarraMenu_Perfil = new javax.swing.JMenu();
        BarraMenu_Perfil_AltPerfil = new javax.swing.JMenuItem();
        BarraMenu_Perfil_Sair = new javax.swing.JMenuItem();
        BarraMenu_Filmes = new javax.swing.JMenu();
        BarraMenu_Filmes_Favoritos = new javax.swing.JMenuItem();
        BarraMenu_Filmes_SolicitarHitorico = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        tabelaFilmes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabelaFilmes);

        btSalvar.setText("add Favoritos");
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });

        btAssistir.setText("Assistir");
        btAssistir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAssistirActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        labelBemVindo.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        labelBemVindo.setForeground(new java.awt.Color(255, 255, 255));
        labelBemVindo.setText("Bem - Vindo ao seu Streaming favorito");

        labelBuscar.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        labelBuscar.setForeground(new java.awt.Color(255, 255, 255));
        labelBuscar.setText("Buscar: ");

        inputBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputBuscarActionPerformed(evt);
            }
        });

        btBuscar.setText("Buscar");
        btBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("UENPflix");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(labelBemVindo)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btBuscar)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelBemVindo)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(labelBuscar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btRecomendados.setText("Recomendados");
        btRecomendados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRecomendadosActionPerformed(evt);
            }
        });

        BarraMenu_Perfil.setText("Perfil");

        BarraMenu_Perfil_AltPerfil.setText("Alterar Cadastro");
        BarraMenu_Perfil_AltPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BarraMenu_Perfil_AltPerfilActionPerformed(evt);
            }
        });
        BarraMenu_Perfil.add(BarraMenu_Perfil_AltPerfil);

        BarraMenu_Perfil_Sair.setText("Sair");
        BarraMenu_Perfil_Sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BarraMenu_Perfil_SairActionPerformed(evt);
            }
        });
        BarraMenu_Perfil.add(BarraMenu_Perfil_Sair);

        jMenuBar1.add(BarraMenu_Perfil);

        BarraMenu_Filmes.setText("Filmes");

        BarraMenu_Filmes_Favoritos.setText("Favoritos");
        BarraMenu_Filmes_Favoritos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BarraMenu_Filmes_FavoritosActionPerformed(evt);
            }
        });
        BarraMenu_Filmes.add(BarraMenu_Filmes_Favoritos);

        BarraMenu_Filmes_SolicitarHitorico.setText("Solicitar Historico");
        BarraMenu_Filmes_SolicitarHitorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BarraMenu_Filmes_SolicitarHitoricoActionPerformed(evt);
            }
        });
        BarraMenu_Filmes.add(BarraMenu_Filmes_SolicitarHitorico);

        jMenuBar1.add(BarraMenu_Filmes);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 832, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btRecomendados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btAssistir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(btSalvar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btAssistir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btRecomendados)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // TODO add your handling code here:
        this.getContentPane().setBackground(Color.white);
        this.setLocationRelativeTo(null);
        criarTabela();
        
        /*
        HistoricoCliente historico = new HistoricoCliente();
        if(this.primeiroAcesso==false){
            historico.setMovimentacao("Entrou");
            this.primeiroAcesso = true;
        }
        else{
            historico.setMovimentacao("Tela Principal");
        }
        historico.setFilmeAssistidos("---");
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
        String horario = String.valueOf(sdf.format(new Date()));
        historico.setHorario(horario);
        try {
            cc.addHist(this.clienteAtual.getLogin(), historico);
        } catch (SQLException ex) {
            Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
        //listaHistorico.add(historico);
    }//GEN-LAST:event_formWindowGainedFocus

    private void BarraMenu_Perfil_SairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BarraMenu_Perfil_SairActionPerformed
        // TODO add your handling code here:
        HistoricoCliente historico = new HistoricoCliente();
        historico.setFilmeAssistidos("---");
        historico.setMovimentacao("Saiu");
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
        String horario = String.valueOf(sdf.format(new Date()));
        historico.setHorario(horario);
        try {
            cc.addHist(this.clienteAtual.getLogin(), historico);
        } catch (SQLException ex) {
            Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
        //listaHistorico.add(historico);
        
        this.clienteAtual.setHistorico(listaHistorico);
        this.listaHistorico.clear();
        this.setVisible(false);
//        TelaLogin telaLogin = new TelaLogin();
//        telaLogin.setLocationRelativeTo(null);
//        telaLogin.setVisible(true);
    }//GEN-LAST:event_BarraMenu_Perfil_SairActionPerformed

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarActionPerformed
        // TODO add your handling code here:
        /*
        Filme filme= null;
        for (Filme f : listaFilme) {
            if (f.getTitulo().equals(codFuncSelecionado)) {
                filme = f;
            }
        }
        */
        int op = JOptionPane.showConfirmDialog(this, codFuncSelecionado +
                "\n" + "Deseja adicionar aos favoritos?");

        if (op == 0) {
            try {
                cc.addFavorito(this.clienteAtual.getLogin(), codFuncSelecionado);
                JOptionPane.showMessageDialog(this, "Filme adicionado aos favoritos!");
                //this.clienteAtual.getFavoritos().add(filme);
            } catch (SQLException ex) {
                Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            HistoricoCliente historico = new HistoricoCliente();
            historico.setFilmeAssistidos(codFuncSelecionado);
            historico.setMovimentacao("Inserido Favoritos");
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
            String horario = String.valueOf(sdf.format(new Date()));
            historico.setHorario(horario);
            try {
                cc.addHist(this.clienteAtual.getLogin(), historico);
            } catch (SQLException ex) {
                Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
            //listaHistorico.add(historico);
            
            btAssistir.setEnabled(false);
        }
    }//GEN-LAST:event_btSalvarActionPerformed

    private void btAssistirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAssistirActionPerformed
        // TODO add your handling code here:
        //Filme filme= null;
        HistoricoCliente historico = new HistoricoCliente();
        /*
        for (Filme f : listaFilme) {
            if (f.getTitulo().equals(codFuncSelecionado)) {
                filme = f;
            }
        }
        */
        int op = JOptionPane.showConfirmDialog(this, "Desejar assistir: \n" + codFuncSelecionado +
                "?");

        if (op == 0) {
            try {//adiciona um ao contador de vezes que o filme foi assistido
                fic.assistirFilme(codFuncSelecionado);
                JOptionPane.showMessageDialog(null, "ASSISTINDO\n" + codFuncSelecionado);
            } catch (SQLException ex) {
                Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
            TelaCliente_AvaliarFilme telaAvaliar = new TelaCliente_AvaliarFilme(codFuncSelecionado);
            telaAvaliar.setLocationRelativeTo(null);
            telaAvaliar.setVisible(true);
            historico.setFilmeAssistidos(codFuncSelecionado);
            historico.setMovimentacao("Assistido");
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
            String horario = String.valueOf(sdf.format(new Date()));
            historico.setHorario(horario);
            
            try {
                cc.addHist(this.clienteAtual.getLogin(), historico);
            } catch (SQLException ex) {
                Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
            //listaHistorico.add(historico);
            
            btAssistir.setEnabled(false);
        }
    }//GEN-LAST:event_btAssistirActionPerformed

    private void BarraMenu_Filmes_FavoritosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BarraMenu_Filmes_FavoritosActionPerformed
        // TODO add your handling code here:
        TelaCliente_TelaMenu_Favoritos telaFavoritos = new TelaCliente_TelaMenu_Favoritos(this.clienteAtual);
        telaFavoritos.setLocationRelativeTo(null);
        telaFavoritos.setVisible(true);
    }//GEN-LAST:event_BarraMenu_Filmes_FavoritosActionPerformed

    private void BarraMenu_Perfil_AltPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BarraMenu_Perfil_AltPerfilActionPerformed
        // TODO add your handling code here:
        TelaCliente_TelaMenu_AlterarCadastroCliente telaAltCliente = new TelaCliente_TelaMenu_AlterarCadastroCliente(this.clienteAtual);
        telaAltCliente.setLocationRelativeTo(null);
        telaAltCliente.setVisible(true);
    }//GEN-LAST:event_BarraMenu_Perfil_AltPerfilActionPerformed

    private void BarraMenu_Filmes_SolicitarHitoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BarraMenu_Filmes_SolicitarHitoricoActionPerformed
        try {
            this.clienteAtual = cc.getClient(this.clienteAtual.getLogin());
        } catch (SQLException ex) {
            Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(this.clienteAtual.getHabilitarHistorico()){
            HistoricoCliente historico = new HistoricoCliente();
            historico.setFilmeAssistidos("---");
            historico.setMovimentacao("Consultou Historico");
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
            String horario = String.valueOf(sdf.format(new Date()));
            historico.setHorario(horario);
            try {
                cc.addHist(this.clienteAtual.getLogin(), historico);
            } catch (SQLException ex) {
                Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
            //listaHistorico.add(historico);
            
            TelaCliente_TelaMenu_Historico telaHistorico = new TelaCliente_TelaMenu_Historico(this.clienteAtual);
            telaHistorico.setLocationRelativeTo(null);
            telaHistorico.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "Habilite o histórico com um funcionário.");
            
            HistoricoCliente historico = new HistoricoCliente();
            historico.setFilmeAssistidos("---");
            historico.setMovimentacao("Solicitou Historico");
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
            String horario = String.valueOf(sdf.format(new Date()));
            historico.setHorario(horario);
            try {
                cc.addHist(this.clienteAtual.getLogin(), historico);
            } catch (SQLException ex) {
                Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
            //listaHistorico.add(historico);
        }
    }//GEN-LAST:event_BarraMenu_Filmes_SolicitarHitoricoActionPerformed

    private void btBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarActionPerformed
        // TODO add your handling code here:
        ArrayList<Filme> resultadoBusca = null;
        String nomeBuscado = inputBuscar.getText();
        try {
            resultadoBusca = this.fic.buscar(nomeBuscado);
            TelaCliente_ResultadoBusca telaBuscado = new TelaCliente_ResultadoBusca(resultadoBusca, this.clienteAtual);
            telaBuscado.setLocationRelativeTo(null);
            telaBuscado.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
            /*
            Filme filme = null;
            
            
            for (Filme f : listaFilme) {
            if (f.getTitulo().equalsIgnoreCase(nomeBuscado)) {
            existe = true;
            filme = f;
            }
            }
            
            if(existe){
            int op = JOptionPane.showConfirmDialog(this, "Desejar assistir: \n" + filme.getTitulo() +
            "?");
            
            if (op == 0) {
            JOptionPane.showMessageDialog(null, "ASSISTINDO\n" + filme.getTitulo());
            
            HistoricoCliente historico = new HistoricoCliente();
            historico.setMovimentacao("Buscou um Filme");
            historico.setFilmeAssistidos(filme.getTitulo());
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
            String horario = String.valueOf(sdf.format(new Date()));
            historico.setHorario(horario);
            try {
            cc.addHist(this.clienteAtual.getLogin(), historico);
            } catch (SQLException ex) {
            Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
            //listaHistorico.add(historico);
            
            }
            }
            if(existe==false){
            JOptionPane.showMessageDialog(null, "Filme não encontrado !");
            
            HistoricoCliente historico = new HistoricoCliente();
            historico.setMovimentacao("Buscou um Filme");
            historico.setFilmeAssistidos("'" + nomeBuscado + "'");
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
            String horario = String.valueOf(sdf.format(new Date()));
            historico.setHorario(horario);
            try {
            cc.addHist(this.clienteAtual.getLogin(), historico);
            } catch (SQLException ex) {
            Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
            //listaHistorico.add(historico);
            
            }*/
        
    }//GEN-LAST:event_btBuscarActionPerformed

    private void inputBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputBuscarActionPerformed

    private void btRecomendadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRecomendadosActionPerformed
        ArrayList<Filme> recomendados = null;
        try {
            recomendados = cc.getFilmeRecomendado(this.clienteAtual.getLogin());
            TelaCliente_ResultadoBusca telaBuscado = new TelaCliente_ResultadoBusca(recomendados, this.clienteAtual);
            telaBuscado.setLocationRelativeTo(null);
            telaBuscado.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btRecomendadosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu BarraMenu_Filmes;
    private javax.swing.JMenuItem BarraMenu_Filmes_Favoritos;
    private javax.swing.JMenuItem BarraMenu_Filmes_SolicitarHitorico;
    private javax.swing.JMenu BarraMenu_Perfil;
    private javax.swing.JMenuItem BarraMenu_Perfil_AltPerfil;
    private javax.swing.JMenuItem BarraMenu_Perfil_Sair;
    private javax.swing.JButton btAssistir;
    private javax.swing.JButton btBuscar;
    private javax.swing.JButton btRecomendados;
    private javax.swing.JButton btSalvar;
    private javax.swing.JTextField inputBuscar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelBemVindo;
    private javax.swing.JLabel labelBuscar;
    private javax.swing.JTable tabelaFilmes;
    // End of variables declaration//GEN-END:variables
}
